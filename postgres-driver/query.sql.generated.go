// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: query.sql

package postgresdriver

import (
	"context"
	"time"
)

const insertError = `-- name: InsertError :exec
INSERT INTO error (error_code, error_name, error_description)
VALUES ($1, $2, $3)
`

type InsertErrorParams struct {
	ErrorCode        int32  `json:"errorCode"`
	ErrorName        string `json:"errorName"`
	ErrorDescription string `json:"errorDescription"`
}

func (q *Queries) InsertError(ctx context.Context, arg InsertErrorParams) error {
	_, err := q.db.ExecContext(ctx, insertError, arg.ErrorCode, arg.ErrorName, arg.ErrorDescription)
	return err
}

const insertPocketSession = `-- name: InsertPocketSession :exec
INSERT INTO pocket_session (session_key, session_height, protocol_application_id)
VALUES ($1, $2, $3)
`

type InsertPocketSessionParams struct {
	SessionKey            string `json:"sessionKey"`
	SessionHeight         int32  `json:"sessionHeight"`
	ProtocolApplicationID int32  `json:"protocolApplicationID"`
}

func (q *Queries) InsertPocketSession(ctx context.Context, arg InsertPocketSessionParams) error {
	_, err := q.db.ExecContext(ctx, insertPocketSession, arg.SessionKey, arg.SessionHeight, arg.ProtocolApplicationID)
	return err
}

const insertPortalRegion = `-- name: InsertPortalRegion :exec
INSERT INTO portal_region (portal_region_name)
VALUES ($1)
`

func (q *Queries) InsertPortalRegion(ctx context.Context, portalRegionName string) error {
	_, err := q.db.ExecContext(ctx, insertPortalRegion, portalRegionName)
	return err
}

const insertRelay = `-- name: InsertRelay :exec
INSERT INTO relay (chain_id, endpoint_id, pocket_session_id, pokt_node_address, relay_start_datetime, relay_return_datetime, is_error, error_id, relay_roundtrip_time, relay_chain_method_id, relay_data_size, relay_portal_trip_time, relay_node_trip_time, relay_url_is_public_endpoint, portal_origin_region_id, is_altruist_relay)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
`

type InsertRelayParams struct {
	ChainID                  int32     `json:"chainID"`
	EndpointID               int32     `json:"endpointID"`
	PocketSessionID          int32     `json:"pocketSessionID"`
	PoktNodeAddress          string    `json:"poktNodeAddress"`
	RelayStartDatetime       time.Time `json:"relayStartDatetime"`
	RelayReturnDatetime      time.Time `json:"relayReturnDatetime"`
	IsError                  bool      `json:"isError"`
	ErrorID                  int32     `json:"errorID"`
	RelayRoundtripTime       int32     `json:"relayRoundtripTime"`
	RelayChainMethodID       int32     `json:"relayChainMethodID"`
	RelayDataSize            int32     `json:"relayDataSize"`
	RelayPortalTripTime      int32     `json:"relayPortalTripTime"`
	RelayNodeTripTime        int32     `json:"relayNodeTripTime"`
	RelayUrlIsPublicEndpoint bool      `json:"relayUrlIsPublicEndpoint"`
	PortalOriginRegionID     int32     `json:"portalOriginRegionID"`
	IsAltruistRelay          bool      `json:"isAltruistRelay"`
}

func (q *Queries) InsertRelay(ctx context.Context, arg InsertRelayParams) error {
	_, err := q.db.ExecContext(ctx, insertRelay,
		arg.ChainID,
		arg.EndpointID,
		arg.PocketSessionID,
		arg.PoktNodeAddress,
		arg.RelayStartDatetime,
		arg.RelayReturnDatetime,
		arg.IsError,
		arg.ErrorID,
		arg.RelayRoundtripTime,
		arg.RelayChainMethodID,
		arg.RelayDataSize,
		arg.RelayPortalTripTime,
		arg.RelayNodeTripTime,
		arg.RelayUrlIsPublicEndpoint,
		arg.PortalOriginRegionID,
		arg.IsAltruistRelay,
	)
	return err
}

const selectRelay = `-- name: SelectRelay :one
SELECT r.relay_id, r.chain_id, r.endpoint_id, r.pocket_session_id, r.pokt_node_address, r.relay_start_datetime, r.relay_return_datetime, r.is_error, r.error_id, r.relay_roundtrip_time, r.relay_chain_method_id, r.relay_data_size, r.relay_portal_trip_time, r.relay_node_trip_time, r.relay_url_is_public_endpoint, r.portal_origin_region_id, r.is_altruist_relay, ps.session_key, ps.session_height, ps.protocol_application_id, pr.portal_region_name, e.error_code, e.error_name, e.error_description
FROM relay r
	INNER JOIN pocket_session ps ON ps.pocket_session_id = r.pocket_session_id
	INNER JOIN portal_region pr ON pr.portal_region_id = r.portal_origin_region_id
	INNER JOIN error e ON e.error_id = r.error_id
WHERE r.relay_id = $1
`

type SelectRelayRow struct {
	RelayID                  int64     `json:"relayID"`
	ChainID                  int32     `json:"chainID"`
	EndpointID               int32     `json:"endpointID"`
	PocketSessionID          int32     `json:"pocketSessionID"`
	PoktNodeAddress          string    `json:"poktNodeAddress"`
	RelayStartDatetime       time.Time `json:"relayStartDatetime"`
	RelayReturnDatetime      time.Time `json:"relayReturnDatetime"`
	IsError                  bool      `json:"isError"`
	ErrorID                  int32     `json:"errorID"`
	RelayRoundtripTime       int32     `json:"relayRoundtripTime"`
	RelayChainMethodID       int32     `json:"relayChainMethodID"`
	RelayDataSize            int32     `json:"relayDataSize"`
	RelayPortalTripTime      int32     `json:"relayPortalTripTime"`
	RelayNodeTripTime        int32     `json:"relayNodeTripTime"`
	RelayUrlIsPublicEndpoint bool      `json:"relayUrlIsPublicEndpoint"`
	PortalOriginRegionID     int32     `json:"portalOriginRegionID"`
	IsAltruistRelay          bool      `json:"isAltruistRelay"`
	SessionKey               string    `json:"sessionKey"`
	SessionHeight            int32     `json:"sessionHeight"`
	ProtocolApplicationID    int32     `json:"protocolApplicationID"`
	PortalRegionName         string    `json:"portalRegionName"`
	ErrorCode                int32     `json:"errorCode"`
	ErrorName                string    `json:"errorName"`
	ErrorDescription         string    `json:"errorDescription"`
}

func (q *Queries) SelectRelay(ctx context.Context, relayID int64) (SelectRelayRow, error) {
	row := q.db.QueryRowContext(ctx, selectRelay, relayID)
	var i SelectRelayRow
	err := row.Scan(
		&i.RelayID,
		&i.ChainID,
		&i.EndpointID,
		&i.PocketSessionID,
		&i.PoktNodeAddress,
		&i.RelayStartDatetime,
		&i.RelayReturnDatetime,
		&i.IsError,
		&i.ErrorID,
		&i.RelayRoundtripTime,
		&i.RelayChainMethodID,
		&i.RelayDataSize,
		&i.RelayPortalTripTime,
		&i.RelayNodeTripTime,
		&i.RelayUrlIsPublicEndpoint,
		&i.PortalOriginRegionID,
		&i.IsAltruistRelay,
		&i.SessionKey,
		&i.SessionHeight,
		&i.ProtocolApplicationID,
		&i.PortalRegionName,
		&i.ErrorCode,
		&i.ErrorName,
		&i.ErrorDescription,
	)
	return i, err
}
